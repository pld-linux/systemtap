--- systemtap-2.6/cache.cxx~	2014-09-05 21:33:21.000000000 +0000
+++ systemtap-2.6/cache.cxx	2014-12-31 20:01:49.768965553 +0000
@@ -294,7 +294,11 @@
         {
           //interval not passed, don't continue
           if (s.verbose > 1)
+#ifdef __ILP32__
+            clog << _F("Cache cleaning skipped, interval not reached %llu s / %lu s.",
+#else
             clog << _F("Cache cleaning skipped, interval not reached %lu s / %lu s.",
+#endif
                        (current_time.tv_sec-sb.st_mtime), cache_clean_interval)  << endl;
           return;
         }
@@ -302,7 +306,11 @@
         {
           //interval reached, continue
           if (s.verbose > 1)
+#ifdef __ILP32__
+            clog << _F("Cleaning cache, interval reached %llu s > %lu s.",
+#else
             clog << _F("Cleaning cache, interval reached %lu s > %lu s.",
+#endif
                        (current_time.tv_sec-sb.st_mtime), cache_clean_interval)  << endl;
         }
 
--- systemtap-3.3/staprun/monitor.c.orig	2018-06-09 00:28:59.000000000 +0200
+++ systemtap-3.3/staprun/monitor.c	2021-12-20 13:10:38.290932651 +0100
@@ -448,12 +448,12 @@
       if (active_window == 0)
         wattron(status, A_BOLD);
       wprintw(status, "\n%*s\t%*s\t%*s\t%*s\t%*s\t%*s\t%s\n",
-              width[p_index], HIGHLIGHT("index", p_index, comp_fn_index),
-              width[p_state], HIGHLIGHT("state", p_state, comp_fn_index),
-              width[p_hits], HIGHLIGHT("hits", p_hits, comp_fn_index),
-              width[p_min], HIGHLIGHT("min", p_min, comp_fn_index),
-              width[p_avg], HIGHLIGHT("avg", p_avg, comp_fn_index),
-              width[p_max], HIGHLIGHT("max", p_max, comp_fn_index),
+              (int) width[p_index], HIGHLIGHT("index", p_index, comp_fn_index),
+              (int) width[p_state], HIGHLIGHT("state", p_state, comp_fn_index),
+              (int) width[p_hits], HIGHLIGHT("hits", p_hits, comp_fn_index),
+              (int) width[p_min], HIGHLIGHT("min", p_min, comp_fn_index),
+              (int) width[p_avg], HIGHLIGHT("avg", p_avg, comp_fn_index),
+              (int) width[p_max], HIGHLIGHT("max", p_max, comp_fn_index),
               HIGHLIGHT("name", p_name, comp_fn_index));
       if (active_window == 0)
         wattroff(status, A_BOLD);
@@ -466,17 +466,17 @@
           json_object *probe, *field;
           probe = json_object_array_get_idx(jso_probe_list, i);
           json_object_object_get_ex(probe, "index", &field);
-          wprintw(status, "%*s\t", width[p_index], json_object_get_string(field));
+          wprintw(status, "%*s\t", (int) width[p_index], json_object_get_string(field));
           json_object_object_get_ex(probe, "state", &field);
-          wprintw(status, "%*s\t", width[p_state], json_object_get_string(field));
+          wprintw(status, "%*s\t", (int) width[p_state], json_object_get_string(field));
           json_object_object_get_ex(probe, "hits", &field);
-          wprintw(status, "%*s\t", width[p_hits], json_object_get_string(field));
+          wprintw(status, "%*s\t", (int) width[p_hits], json_object_get_string(field));
           json_object_object_get_ex(probe, "min", &field);
-          wprintw(status, "%*s\t", width[p_min], json_object_get_string(field));
+          wprintw(status, "%*s\t", (int) width[p_min], json_object_get_string(field));
           json_object_object_get_ex(probe, "avg", &field);
-          wprintw(status, "%*s\t", width[p_avg], json_object_get_string(field));
+          wprintw(status, "%*s\t", (int) width[p_avg], json_object_get_string(field));
           json_object_object_get_ex(probe, "max", &field);
-          wprintw(status, "%*s\t", width[p_max], json_object_get_string(field));
+          wprintw(status, "%*s\t", (int) width[p_max], json_object_get_string(field));
           getyx(status, discard, cur_x);
           json_object_object_get_ex(probe, "name", &field);
           wprintw(status, "%.*s", max_cols-cur_x-1, json_object_get_string(field));
